extends ../layouts/layout
//- http://cwbuecheler.com/web/tutorials/2014/restful-web-app-node-express-mongodb/

block head
  title #{application} &middot; Teams

block content
  .container
    .row
      .col-md-4.col-md-push-8
        .page-header
          h2
            i.fa.fa-user
            | &nbsp;Team Details
        //- TEAM INFO
        #teamInfo.well
          p
            strong Name:
            |  <span id='teamInfoName'></span>
          p
            strong Date Established:
            |  <span id='teamInfoEstablished'></span>
          p.hidden-xs
            strong Users:
            |  <span id='teamInfoUsers'></span>
          p.hidden-xs
            strong Projects:
            |  <span id='teamInfoProjects'></span>
        //- /TEAM INFO
      .col-md-8.col-md-pull-4
        .page-header
          h2
            i.fa.fa-users
            | &nbsp;#{application} Teams
        //- CREATE TEAM
        a.btn.btn-primary(href='/team/create', role='button') Create Team
        if config.userData
          //- BASE FILE LOCATION
          input.hidden(type='text', name='fileLocation', id='fileLocation', value=config.userDataLocation)
        //- Wrapper
        #wrapper

          //- TEAM LIST
          #teamList
            table.table.table-striped
              thead
                th Name
                th.hidden-xs Number of Users
                th.hidden-xs Number of Projects
                th.hidden-xs Date Established
                th Deploy Workspaces
                th Update
                th Delete?
              tbody
          //- /TEAM LIST

        //- /WRAPPER


  #myModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
      .modal-dialog.modal-sm
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-hidden='true') Ã—
            h4#myModalLabel.modal-title Delete confirmation
          .modal-body
            input.form-control(type='hidden', name='team_id', id='team_id', required)
            h4 Are you sure?
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') No
            button#yesDeleteTeam.btn.btn-primary(type='button') Yes!
  #progressModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
      .modal-dialog.modal-sm
        .modal-content
          .modal-body
            h4.text-center Creating Workspaces
            h4.text-center.text-primary
              i.fa.fa-circle-o-notch.fa-spin

  //- script(src='lib/moment/min/moment.min.js')
  //- script(src='lib/bootstrap/js/modal.js')
block scripts
  script.
    // Teamlist data array for filling in info box
    var teamListData = [];

    // DOM Ready =============================================================
    $(document).ready(function() {

      //- Async Load Bootstrap Modal
      $.ajax({
        type: 'GET',
        url: 'lib/bootstrap/js/modal.js',
        dataType: 'script',
        cache: true
      });

      //- Async Load moment.js
      $.ajax({
        type: 'GET',
        url: 'lib/moment/min/moment.min.js',
        dataType: 'script',
        cache: true
      }).done(function(script, textStatus) {
        // Now populate the team table
        populateTable();
      });

      // Team Name link click
      $('#teamList table tbody').on('click', 'td a.linkshowteam', showTeamInfo);

      // Deploy Team link click
      $('#teamList table tbody').on('click', 'td a.linkdeployteam', deployTeam);

      // Redeploy Team link click
      $('#teamList table tbody').on('click', 'td a.linkredeployteam', redeployTeam);

      // Delete Team link click
      $('#teamList table tbody').on('click', 'td a.linkshowdeleteteammodal', showDeleteTeamModal);

      // Confirm Delete Team link click
      $('#yesDeleteTeam').on('click', deleteTeam);
    });

    // Functions =============================================================

    // Fill table with data
    function populateTable() {

      // Empty content string
      var tableContent = '';

      // jQuery AJAX call for JSON
      $.getJSON( '/teamlist', function( data ) {

        // Stick our user data array into a userlist variable in the global object
        teamListData = data;

        // For each item in our JSON, add a table row and cells to the content string
        $.each(data, function(){
          tableContent += '<tr>';
          tableContent += '<td><a href="#" class="linkshowteam btn btn-info btn-xs"" rel="' + this._id + '" title="Show Details">' + this.name + '</td>';
          tableContent += '<td class="hidden-xs">' + ((this.users == null) ? 0 : this.users.length) + '</td>';
          tableContent += '<td class="hidden-xs">' + ((this.projects == null) ? 0 : this.projects.length) + '</td>';
          tableContent += '<td class="hidden-xs">' + moment(this.date_established).format('MMMM Do YYYY') + '</td>';
          // Check if Team is Deployed
          if(this.deployed == false) {
            tableContent += '<td><a href="#' + this._id + '" class="linkdeployteam btn btn-success btn-xs" rel="' + this._id + '">Deploy!</a></td>';
          }
          else {
            tableContent += '<td><a href="#' + this._id + '" class="linkredeployteam btn btn-warning btn-xs" rel="' + this._id + '">Redeploy!</a></td>';
          }
          tableContent += '<td><a href="team/update?' + this._id + '" class="btn btn-primary btn-xs" rel="' + this._id + '">Update</a></td>';
          tableContent += '<td><a href="#" class="linkshowdeleteteammodal btn btn-danger btn-xs" rel="' + this._id + '">Danger!</a></td>';
        });

        // Inject the whole content string into our existing HTML table
        $('#teamList table tbody').html(tableContent);
      });

    };

    // Show Team Info
    function showTeamInfo(event) {

      // Prevent Link from Firing
      event.preventDefault();

      // Retrieve teamname from link rel attribute
      var thisTeamId = $(this).attr('rel');

      // Get Index of object based on id value
      var arrayPosition = teamListData.map(function(arrayItem) { return arrayItem._id; }).indexOf(thisTeamId);

      // Get our Team Object
      var thisTeamObject = teamListData[arrayPosition];

      //Populate Info Box
      $('#teamInfoName').text(thisTeamObject.name);
      $('#teamInfoEstablished').text(moment(thisTeamObject.date_established).format('MMMM Do YYYY'));
 
      // Populate Users if not null
      if(thisTeamObject.users !== null) { 
        var userContent = '<ul>';
        $.each(thisTeamObject.users, function(){
          userContent += '<li>' + this.profile.name + '</li>';
        });

        // Inject the whole content string into our existing HTML table
        $('#teamInfoUsers').html(userContent);
      }

      // Populate Projects if not null
      if(thisTeamObject.projects !== null) { 
        var projectContent = '<ul>';
        $.each(thisTeamObject.projects, function(){
          projectContent += '<li>' + this.name + '</li>';
        });

        // Inject the whole content string into our existing HTML table
        $('#teamInfoProjects').html(projectContent);
      }
    };

    // Deploy Workspaces
    function deployTeam(event) {

      // Prevent Link from Firing
      event.preventDefault();

      // Show Modal
      $('#progressModal').modal({keyboard:true,backdrop:'static'});

      // Retrieve team id from link rel attribute
      var thisTeamId = $(this).attr('rel');

      // Get Index of object based on id value
      var arrayPosition = teamListData.map(function(arrayItem) { return arrayItem._id; }).indexOf(thisTeamId);

      // Get our Team Object
      var thisTeamObject = teamListData[arrayPosition];
 
      // Create User Directory
      // function call

      // Create Containers
      createContainers(thisTeamObject);

      // Set Team to deployed
      $.ajax({
        type: 'POST',
        async: false,
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        url: '/teamdeploy/' + thisTeamObject._id
      });

      // Hide Modal
      $('#progressModal').modal('hide');

      // Update the table
      populateTable();

    };

    // Create Containers
    function createContainers(team) {
      $.each(team.projects, function(){
        var project = this;
        var hostPort = '';
        var lastHostPort = '';
        var usedPorts = [];

        // Check if Project needs to use Ports
        if (project.docker_opts.host_port !== '') {
          hostPort = parseInt(project.docker_opts.host_port.split(':')[0]);
          lastHostPort = parseInt(project.docker_opts.host_port.split(':')[1]);

          // Get host ports
          $.ajax({
            type: 'GET',
            async: false,
            headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
            url: '/docker/containers',
            success: function(data) {
              $.each( data, function () {
                if (this.Names[0].search('_' + project.name + '_') != -1 ) {
                  if (this.Ports.length > 0 ) {
                    $.each(this.Ports, function() {
                      usedPorts.push( this.PublicPort );
                    });
                  }
                }
              });
            }
          });
        }

        $.each(team.users, function(){
          var user = this;

          //Check if host port is used
          while( usedPorts.indexOf(hostPort) != -1 ) {
              hostPort += 1;
          }

          // Check for User data
          var volume = '';
          if ($('#fileLocation').length) {
            //Create User Directory
            var userPath = user.profile.name + '/' + team.name + '/' + project.name;
            createUserDirectory(userPath);
            volume = $('#fileLocation').val() + userPath + ':/home/workspace';
          }

          // Create Docker Container
          var opts = {
            image: project.docker_opts.image,
            // Name is in the format team_project_username
            // Note: Docker Name cannot contain spaces
            // so used hyphens instead of spaces
            name: team.name.replace(/ /g,'-') + '_' + project.name.replace(/ /g, '-') + '_' + user.profile.name.replace(/ /g,'-'),
            cmd: project.docker_opts.cmd,
            tty: true,
            containerPort: project.docker_opts.container_port,
            hostPort: hostPort,
            volume: volume
          };

          // Only create container if enough host ports
          if (hostPort <= lastHostPort) {
            $.ajax({
              type: 'POST',
              async: false,
              headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
              data: opts,
              url: '/docker/createcontainer'
            }).done(function( response ) {
              // Check for a successful (blank) response
              if (response.msg === '') {
              }
              else {
                alert('Error: ' + response.msg);
              }
            });
          }
          else {
              alert('Could Not Create Containers!\nNot enough Host Ports for Project: ' + project.name + '.');
              return false;
          }
          // Update Host Port if not empty
          (hostPort != '') ? hostPort += 1 : hostPort = '';
        });
      });
    };

    // Create User Directory
    function createUserDirectory(path) {
     $.ajax({
        type: 'POST',
        async: false,
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        data: { path:path },
        url: '/workspace/createuserdir'
      }).done(function( response ) {
        // Check for a successful (blank) response
        if (response.msg === '') {
        }
        else {
          alert('Error: ' + response.msg);
        }
      });
    }

    // Redeploy Workspaces
    function redeployTeam(event) {

      // Prevent Link from Firing
      event.preventDefault();

      // Show Modal
      $('#progressModal').modal({keyboard:true,backdrop:'static'});

      // Retrieve team id from link rel attribute
      var thisTeamId = $(this).attr('rel');

      // Get Index of object based on id value
      var arrayPosition = teamListData.map(function(arrayItem) { return arrayItem._id; }).indexOf(thisTeamId);

      // Get our Team Object
      var thisTeamObject = teamListData[arrayPosition];

      // jQuery AJAX call for JSON
      $.ajax({
        type: 'GET',
        async: false,
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        url: '/docker/containers',
        success: function(data) {
          $.each(data, function(){
            // Finds the containers that belong to the project
            if (this.Names[0].search(thisTeamObject.previous_name.replace(/ /g, '-') + '_') != -1 ) {
             // Stop the Container
             $.ajax({
                type: 'POST',
                async: false,
                headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
                url: '/docker/stopcontainer/' + this.Id
              });

              // Remove the Container
              $.ajax({
                type: 'DELETE',
                async: false,
                headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
                url: '/docker/removecontainer/' + this.Id
              });
            }
          });

          // Create Docker Containers
          createContainers(thisTeamObject);

          // Update Teams previous name field
          $.ajax({
            type: 'POST',
            async: false,
            headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
            url: '/teamupdatename/' + thisTeamObject._id
          });
        }
      });

      // Hide Modal
      $('#progressModal').modal('hide');

      // Update the table
      populateTable();

    };

    // Delete User
    function showDeleteTeamModal(event) {

      // Prevent Link from Firing
      event.preventDefault();

       // show modal
       $('#myModal').modal({keyboard:true,backdrop:'static'});

      // Set Team Id to hidden field
      // so we pass the Team's Id through
      $('#team_id').val($(this).attr('rel'));

    };

    function deleteTeam(event) {
      // Prevent Link from Firing
      event.preventDefault();

      // do our delete
      $.ajax({
        type: 'DELETE',
        //- headers: { 'X-CSRF-Token': '#{token}' },
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        url: '/teamlist/' + $('#team_id').val()
      }).done(function( response ) {
        // Check for a successful (blank) response
        if (response.msg === '') {
        }
        else {
          alert('Error: ' + response.msg);
        }
        // Update the table
        populateTable();
      });
      // close the modal
      $('#myModal').modal('hide');

    };
