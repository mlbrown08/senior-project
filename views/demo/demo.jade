extends ../layouts/layout

block head
  title #{application} &middot; Docker Demo

block styles
  link(rel='stylesheet', href='/lib/animate.css/animate.css')

block content
  .jumbotron.white
    .container
      h1 Docker Remote API Demo
      .row
        .col-md-7.col-md-push-5
          img.center-block.img-responsive.animated.bounceInLeft(alt='Docker Ship Logo', src='img/docker-logo-ship.png', width='400px')
        .col-md-4.col-md-offset-1.col-md-pull-7
          ol.fa-ol.visible-md.visible-lg
            li Getting Docker Images
            li Working with Images
            li Working with Containers
            li Run Python Webserver

  .container
    br
    .row
      h2 Getting Docker Images
      ul.visible-md.visible-lg
        li: a(href='https://registry.hub.docker.com/', title='Docker Hub', target='_blank') Docker Hub
        li: a(href='https://registry.hub.docker.com/u/training/webapp/dockerfile/', title='DOCKERFILE', target='_blank') Create DOCKERFILE
    .row
      h2 List Images
        .btn.btn-primary(href='#', role='button', id='listImages', style='float:right;') Refresh

      //- IMAGE LIST
      #imageList
        table.table
          thead
            th Repo Tags
            th Id
            th Virtual Size
            th Start Container
            th Delete Image
          tbody
      //- /IMAGE LIST
    .row
      h2 List Containers
        .btn.btn-primary(href='#', role='button', id='listContainers', style='float: right;') Refresh

      //- CONTAINER LIST
      #containerList
        table.table
          thead
            th Id
            th Image
            th Command
            th Status
            th Names
            th Start
            th Stop
            th Remove
          tbody
      //- /CONTAINER LIST
    .row
      h2 Running Python Webserver
      pre#editor
      .btn.btn-primary(href='#', role='button', id='savefile' ) Save

  #myModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
      .modal-dialog.modal-sm
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
            h4#myModalLabel.modal-title Delete confirmation
          .modal-body
            h4 Are you sure?
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') No
            button#yes.btn.btn-primary(type='button') Yes!

  #createContainerModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
      .modal-dialog.modal-sm
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
            h4#myModalLabel.modal-title Start Docker Container
          .modal-body
            form#createContainerForm
              input(type='hidden', name='_csrf', calue=_crsf)
              legend Container Options
              .form-group
                label(for='image') Image:
                input.form-control(type='text', name='image', id='image', placeholder='Docker Image', autofocus=true, required)
              .form-group
                label(for='cmd') CMD:
                input.form-control(type='text', name='cmd', id='cmd', placeholder='Your Command', required)
              .form-group
                label(for='tty') Terminal:
              .radio
                label
                  input(type='radio', checked='true', name='tty', id='tty', value='true', data-toggle='radio')
                  | Yes
              .radio
                label
                  input(type='radio',  name='tty', id='tty', value='false', data-toggle='radio')
                  | No
              .form-group
                label(for='containerPort') Port:
                input.form-control(type='text', name='containerPort', id='containerPort', placeholder='Container Port - Ex. 5000/tcp')
              .form-group
                label.sr-only(for='hostPort') Port:
                input.form-control(type='text', name='hostPort', id='hostPort', placeholder='Host Port - Ex. 49153')
              .form-group
                label(for='volume') Volume:
                input.form-control(type='text', name='volume', id='volume', placeholder='Your Volume:Mount Point')
              .form-group
                button.btn.btn-default(type='button', data-dismiss='modal') No
                button#yesCreateContainer.btn.btn-primary(type='button') Create
  
  #stopContainerModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='stopModalContainerLabel', aria-hidden='true')
      .modal-dialog.modal-sm
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
            h4#myModalLabel.modal-title Stop Container Confirmation
          .modal-body
            h4 Are you sure?
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') No
            button#yesStopContainer.btn.btn-primary(type='button') Yes!

  #removeContainerModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='removeModalContainerLabel', aria-hidden='true')
      .modal-dialog.modal-sm
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-hidden='true') ×
            h4#myModalLabel.modal-title Remove Container Confirmation
          .modal-body
            h4 Are you sure?
            a.removeId 
          .modal-footer
            button.btn.btn-default(type='button', data-dismiss='modal') No
            button#yesRemoveContainer.btn.btn-primary(type='button') Yes!


//- Page-specific stuff
block scripts
  //- Async load odometer styles
  script.
    var cb = function() {
      var l = document.createElement('link'); l.rel = 'stylesheet';
      l.href = 'lib/odometer/themes/odometer-theme-minimal.css';
      var h = document.getElementsByTagName('head')[0]; h.parentNode.insertBefore(l, h);
    };
    var raf = requestAnimationFrame || mozRequestAnimationFrame ||
        webkitRequestAnimationFrame || msRequestAnimationFrame;
    if (raf) raf(cb);
    else window.addEventListener('load', cb);

  //- Tweak the styles a bit...
  style.
    body {
        margin-bottom: 400px;
    }
    #editor {
        position: relative;
        height: 300px;
        width: 93%;
    }
    .github-count {
      margin-top:20px;
      font-size: 20px;
      text-align: center;
    }
    .odometer-label {
      margin-right: 10px;
      line-height: 1;
      vertical-align: middle;
    }
    .odometer {
      padding: 13px 21px 11px;
      margin: auto;
      line-height: 1 !important;
      border-radius: 6px;
    }
    .odometer-label a {
      text-decoration: none;
    }
    .odometer-label a:hover {
      color: #B10DC9;
    }

  // - Load Ace Editor.js
  script(src='lib/ace/ace.js', type='text/javascript')

  // - Configure Ace Editor.js
  script.
    var editor = ace.edit('editor');
    editor.setTheme('ace/theme/textmate');
    editor.getSession().setMode('ace/mode/python');
  
  script.
    $(document).ready(function() {
      //- Async Load Bootstrap Modal.js
      $.ajax({
        type: 'GET',
        url: 'lib/bootstrap/js/modal.js',
        dataType: 'script',
        cache: true
      });

      //- Async Load moment.js
      $.ajax({
        type: 'GET',
        url: 'lib/moment/min/moment.min.js',
        dataType: 'script',
        cache: true
      }).done(function(script, textStatus) {
          // Load app.py file in Ace Editor
          loadFile();
          // Populate tables
          populateImageTable();
          populateContainersTable();
      });
      
      // List Images link click
      $('#listImages').on('click', listImages);
      $('#listContainers').on('click', listContainers);
      $('#savefile').on('click', saveFile);
      $('#imageList table tbody').on('click', 'td a.linkcreatecontainer', createContainerModal);
      $('#imageList table tbody').on('click', 'td a.linkdeleteimage', deleteImage);
      $('#containerList table tbody').on('click', 'td a.linkstartcontainer', startContainer);
      $('#containerList table tbody').on('click', 'td a.linkstopcontainer', stopContainer);
      $('#containerList table tbody').on('click', 'td a.linkremovecontainer', removeContainer);
      
      // Yes Button to create a container
      // Moved out of function because keep calling for each click
      $('#yesCreateContainer').on('click', createContainer);

    });
      
    // List Images when button is clicked
    function listImages(event) {

      // Prevent Link from Firing
      event.preventDefault();

      // List Images
      populateImageTable();

    };

    // List Images
    function populateImageTable() {
      // Empty content string
      var tableContent = '';

      // jQuery AJAX call for JSON
      $.getJSON( '/docker/images', function( data ) {

        // Stick our user data array into a userlist variable in the global object
        userListData = data;

        // For each item in our JSON, add a table row and cells to the content string
        $.each(data, function(){
          // Holds all the RepoTags associated with an image id
          var repoTags = this.RepoTags;

          // For each RepoTag in out array, add a table row and cells to the content string
          for( i = 0; i < repoTags.length; i++ ) {
            tableContent += '<tr>';
            tableContent += '<td>' + repoTags[i] + '</td>';
            tableContent += '<td>' + this.Id.substring(0,8) + '</td>';
            tableContent += '<td>' + this.VirtualSize + '</td>';
            tableContent += '<td><a href="#" class="linkcreatecontainer btn btn-primary" rel="' + repoTags[i] + '">Create</a></td>';
            tableContent += '<td><a href="#" class="linkdeleteimage btn btn-danger" rel="' + repoTags[i] + '">Delete</a></td>';
          }
        });

        // Inject the whole content string into our existing HTML table
        $('#imageList table tbody').html(tableContent);
      });

    };

    // Delete Image
    function deleteImage(event) {

      // Prevent Link from Firing
      event.preventDefault();
        
      // Pop up a confirmation dialog
      // Convoluted because we have to
      // pass the images' name through
      function showmodal(name) {
        // show modal
        $('#myModal').modal({keyboard:true,backdrop:'static'});
        // if "yes" clicked
        $('#yes').on('click', function () {
          // do our delete
          $.ajax({
            type: 'DELETE',
            //- headers: { 'X-CSRF-Token': '#{token}' },
            headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
            data:{name:name},
            url: '/docker/deleteimage/'
          }).done(function( response ) {
            // Check for a successful (blank) response
            if (response.msg === '') {
            }
            else {
              //alert('Error: ' + response.msg);
            }
            // Update the table
            populateImageTable();
          });
          // close the modal
          $('#myModal').modal('hide');
        });
      }

      // call modal function with the image's name
      showmodal($(this).attr('rel'));

    };

    // Shows create Docker Container modal
    function createContainerModal(event) {

      // Prevent Link from Firing
      event.preventDefault();
      
      // Prevent Enter Key from Firing
      $('#cmd').keypress(function(event) {
          if(event.which == 13) {
              event.preventDefault();
          }
      });
      
      // Pop up a confirmation dialog
      // Convoluted because we have to
      // pass the images' name through
      function showmodal(name) {
        // show modal
        $('#createContainerModal').modal({keyboard:true,backdrop:'static'});
        $('#image').val(name);
      }
      // call modal function with the image's name
      showmodal($(this).attr('rel'));

    };
    
    // Create Docker Container
    function createContainer(event) {
      var opts = {
        image: $('#image').val(),
        name: '',
        cmd: $('#cmd').val(),
        tty: $('#tty').val(),
        containerPort: $('#containerPort').val(),
        hostPort: $('#hostPort').val(),
        volume: $('#volume').val()
      };
      // do our post
      $.ajax({
        type: 'POST',
        //- headers: { 'X-CSRF-Token': '#{token}' },
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        data: opts,
        url: '/docker/createcontainer'
      }).done(function( response ) {
        // Check for a successful (blank) response
        if (response.msg === '') {
        }
        else {
          //alert('Error: ' + response.msg);
        }
        // Update the table
        populateContainersTable();
      });
      // close the modal
      $('#createContainerModal').modal('hide');
      
      // Clear contents of CMD field
      $('#cmd').val('');
      $('#containerPort').val('');
      $('#hostPort').val('');
      $('#volume').val('');
    };

    function listContainers(event) {

      // Prevent Link from Firing
      event.preventDefault();
      
      // List Containers 
      populateContainersTable();

    };
    function listContainers(event) {

      // Prevent Link from Firing
      event.preventDefault();
      
      // List Containers 
      populateContainersTable();

    };

    // List Containers
    function populateContainersTable() {

      // Empty content string
      var tableContent = '';

      // jQuery AJAX call for JSON
      $.getJSON( '/docker/containers', function( data ) {

        // Stick our user data array into a userlist variable in the global object
        userListData = data;

        // For each item in our JSON, add a table row and cells to the content string
        $.each(data, function(){
          tableContent += '<tr>';
          tableContent += '<td>' + this.Id.substring(0,8) + '</td>';
          tableContent += '<td>' + this.Image + '</td>';
          tableContent += '<td>' + this.Command + '</td>';
          tableContent += '<td>' + this.Status + '</td>';
          tableContent += '<td>' + this.Names + '</td>';
          tableContent += '<td><a href="#" class="linkstartcontainer btn btn-primary" rel="' + this.Id + '">Start</a></td>';
          tableContent += '<td><a href="#" class="linkstopcontainer btn btn-warning" rel="' + this.Id + '">Stop</a></td>';
          tableContent += '<td><a href="#" class="linkremovecontainer btn btn-danger" rel="' + this.Id + '">Remove</a></td>';
        });

        // Inject the whole content string into our existing HTML table
        $('#containerList table tbody').html(tableContent);
      });

    };
    
    // Start Container
    function startContainer(event) {

      // Prevent Link from Firing
      event.preventDefault();
      var id = $(this).attr('rel');
        
      $.ajax({
        type: 'POST',
        //- headers: { 'X-CSRF-Token': '#{token}' },
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        url: '/docker/startcontainer/' + id
      }).done(function( response ) {
        // Check for a successful (blank) response
        if (response.msg === '') {
        }
        else {
          //alert('Error: ' + response.msg);
        }
        // Update the table
        populateContainersTable();
      });

    };

    // Stop Container
    function stopContainer(event) {

      // Prevent Link from Firing
      event.preventDefault();
        
      // Pop up a confirmation dialog
      // Convoluted because we have to
      // pass the container's id through
      function showmodal(id) {
        // show modal
        $('#stopContainerModal').modal({keyboard:true,backdrop:'static'});
        // if "yes" clicked
        $('#yesStopContainer').on('click', function () {
          // do our delete
          $.ajax({
            type: 'POST',
            //- headers: { 'X-CSRF-Token': '#{token}' },
            headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
            url: '/docker/stopcontainer/' + id
          }).done(function( response ) {
            // Check for a successful (blank) response
            if (response.msg === '') {
            }
            else {
              //alert('Error: ' + response.msg);
            }
            // Update the table
            populateContainersTable();
          });
          // close the modal
          $('#stopContainerModal').modal('hide');
        });
      }

      // call modal function with the container's id
      showmodal($(this).attr('rel'));

    };

    // Remove Container
    function removeContainer(event) {

      // Prevent Link from Firing
      event.preventDefault();
        
      // Pop up a confirmation dialog
      // Convoluted because we have to
      // pass the container's name through
      function showmodal(id) {
        // show modal
        $('#removeContainerModal').modal({keyboard:true,backdrop:'static'});

        // if "yes" clicked
        $('#yesRemoveContainer').on('click', function () {
          // do our delete
          $.ajax({
            type: 'DELETE',
            //- headers: { 'X-CSRF-Token': '#{token}' },
            headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
            url: '/docker/removecontainer/' + id
          }).done(function( response ) {
            // Check for a successful (blank) response
            if (response.msg === '') {
            }
            else {
              //alert(response.msg);
            }
            // Update the table
            populateContainersTable();
          });
          // close the modal
          $('#removeContainerModal').modal('hide');
        });
      }
      // call modal function with the container's id
      showmodal($(this).attr('rel'));
    }

    function loadFile() {
      $.ajax({
        type: 'POST',
        //- headers: { 'X-CSRF-Token': '#{token}' },
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        data: {file:'/home/mls102390/src/app.py'},
        url: '/workspace/readfile'
      }).done(function( response ) {
        // Update Ace Editor
        if (response.msg === '') {
          editor.setValue(response.data, 1);
        }
      });
    }

    function saveFile(event) {
      // Prevent Link from Firing
      event.preventDefault();

      $.ajax({
        type: 'POST',
        //- headers: { 'X-CSRF-Token': '#{token}' },
        headers: { 'X-CSRF-Token': $('meta[name="x-csrf-token"]').attr('content')},
        data:{
          file:'/home/mls102390/src/app.py', 
          text:editor.getValue()
        },
        url: '/workspace/savefile'
      }).done(function( response ) {
        // Update Ace Editor
        loadFile();
      });
    }
